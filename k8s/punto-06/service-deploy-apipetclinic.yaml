apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-petclinic
  namespace: name1
  labels:
    app: api-petclinic
spec:
  selector: #permite seleccionar un conjunto de objetos que cumplan las condiciones
    matchLabels:
      app: api-petclinic
  replicas: 2 #replicaset
  strategy:
    type: RollingUpdate # otro valor ->  Recreate (evita que el controlador actualice de forma autom√°tica)
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template: # Plantilla que define los containers
    metadata:
      labels:
        app: api-petclinic
    spec:
      containers:
        - name: api-petclinic 
          image: carlos89/app-petclinic-curso-k8s:v1
          imagePullPolicy: Always
          ports:
              - containerPort: 8080
          env:
          - name: MYSQL_URL
            valueFrom:
              configMapKeyRef:
                name: datasource-app
                key: MYSQL_URL
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: datasource-app
                key: MYSQL_USER
          - name: MYSQL_PASS
            valueFrom:
              configMapKeyRef:
                name: datasource-app
                key: MYSQL_PASS                                    
#          envFrom:
#          - configMapRef:
#              name: datos-mysql-env
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "1Gi"
              cpu: "1"
          readinessProbe:
            httpGet:
              # path: /status/verificar
              path: /
              port: 8080
            periodSeconds: 3
            timeoutSeconds: 2
---
apiVersion: v1
kind: Service
metadata:
  name: api-petclinic-svc
  namespace: name1
spec:
  type: ClusterIP
  selector:
    app: api-petclinic
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080            